var FormData = require('form-data');
var grid = require('gridfs-stream');
var fs = require('fs');
var st = require('streamifier');

var getImage = function(mongoose, id,callback) {
	process.nextTick(function store() {
		var _id = new mongoose.Types.ObjectId(id);
		console.log('start');
		var gfs = grid(mongoose.connection.db, mongoose.mongo);
		
		gfs.exist({_id: id }, function (err, found) {
  			if (err) return callback(err,null);
  			found ? console.log('File exists') : console.log('File does not exist');
			
			if (!found) 
			{
				callback({message: 'File does not exists'},null);
				return;		
			}
			var readstream = gfs.createReadStream({
				_id: id
			});
			//st.createReadStream(image).pipe(writestream);
			//console.log(id);
			callback(null,readstream);
		});
	});	
}

var storeImage = function(mongoose, image, fileName, contentType, callback) {
	process.nextTick(function store() {
		var id = new mongoose.Types.ObjectId();
		var gfs = grid(mongoose.connection.db, mongoose.mongo)
        var writestream = gfs.createWriteStream({
			  _id: id,
			  filename: fileName,
			  content_type: contentType
        });
		var stream = st.createReadStream(image).pipe(writestream);
		
		stream.on('finish', function () { 
			console.log(id);
			callback(id); });
		
		
	});
}

var recognizeImage = function (hostname, url, binaryData, callback) {
	process.nextTick(function processImage() { //get async
		//var readStream = st.createReadStream(binaryData.toString('binary'));
		var form = new FormData();

		form.append('file.png', binaryData, { contentType: 'image/x-png', filename: 'file.png' });
		form.submit({ //Submit request		
			host: hostname, path: url,
			headers: {
				'Content-Type': 'multipart/mixed; boundary=' + form.getBoundary()
			}
		}, function (err, r) {
			r.on('data', function faceAttributes(data) {
				var jsonObject = JSON.parse(data);
				console.log(jsonObject);				
				if (jsonObject.photos && jsonObject.photos[0].tags) {
					var tags = jsonObject.photos[0].tags[0];
					var attributes = tags.attributes;
					console.log("age:" + attributes.age_est.value + ", gender:" + attributes.gender.value);
					callback({ age: attributes.age_est.value, gender: attributes.gender.value });
				} else {
					callback({ message: 'Face not recognized' });
				}
			});
		});
	});
	return;
}

exports.getImage = getImage;
exports.recognizeImage = recognizeImage;
exports.storeImage = storeImage;